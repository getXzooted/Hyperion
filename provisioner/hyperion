#!/bin/bash
#
# The Hyperion Command Line Interface


set -e


# Check for root privileges
if [[ $EUID -ne 0 ]]; then
   echo "This command must be run as root. Please use 'sudo hyperion'."
   exit 1
fi


# Set the KUBECONFIG for all kubectl/flux commands
export KUBECONFIG=/etc/rancher/k3s/k3s.yaml


# --- Flag Handling ---

# --- Flag Handling ---
case "$1" in
    --dns)
        echo "--> Querying for Pi-hole DNS service IP..."
        # This command gets the service and uses a jsonpath to extract only the IP.
        DNS_IP=$(kubectl get svc pihole-dns-svc -n pi-hole -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "not found")

        if [ "$DNS_IP" = "not found" ]; then
            echo "--> ERROR: Could not retrieve the IP address. Is the pi-hole component installed and running?"
            exit 1
        fi

        echo "    Your Hyperion DNS Address is: ${DNS_IP}"
        exit 0
        ;;
    --kill-proxy)
        echo "--> Searching for and stopping the 'kubectl proxy' process..."
        # The pkill command is a more direct way to find and kill a process by name.
        # The -f flag matches against the full command line string.
        pkill -f 'kubectl proxy' || echo "--> No running proxy process found."
        echo "--> Done."
        exit 0
        ;;
    --dashboard-kube)
        echo "--> Starting Kubernetes Dashboard proxy in the background..."
        # Start the proxy in the background
        kubectl proxy --address='0.0.0.0' &
        # Give it a moment to start
        sleep 2
        sudo bash -E /opt/Hyperion/provisioner/get-dashboard-token.sh
        echo "--> Proxy started. You can now access the dashboard on your main computer at:"
        echo "    http://<ip_address>:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/"
        echo "--> To get another login token, run 'sudo /opt/Hyperion/provisioner/get-dashboard-token.sh'"
        exit 0
        ;;
esac


# --- Main Logic ---
BASE_PLATFORM_MARKER="/etc/hyperion/state/base_platform_complete.done"

# A) Check if the base platform is fully provisioned.
if [ -f "$BASE_PLATFORM_MARKER" ]; then
    echo "--> Base platform is stable. Running the Git input script..."
    # B) If it is, run the script that handles custom deployments.
    exec bash /opt/Hyperion/provisioner/input-git.sh
else
    # If the platform is NOT complete, show the service logs.
    echo "--> Base platform provisioning is still in progress."
    echo "--> Tailing live logs from the hyperion.service..."
    echo "    (Press Ctrl+C to stop watching)"
    journalctl -fu hyperion.service
fi